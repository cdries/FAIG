// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_valmat
arma::mat get_valmat(arma::mat vals, arma::ivec alloc, int n_items, int n_persons);
RcppExport SEXP _FAIG_get_valmat(SEXP valsSEXP, SEXP allocSEXP, SEXP n_itemsSEXP, SEXP n_personsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type alloc(allocSEXP);
    Rcpp::traits::input_parameter< int >::type n_items(n_itemsSEXP);
    Rcpp::traits::input_parameter< int >::type n_persons(n_personsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_valmat(vals, alloc, n_items, n_persons));
    return rcpp_result_gen;
END_RCPP
}
// get_maxenvy
double get_maxenvy(arma::mat valmat, int n);
RcppExport SEXP _FAIG_get_maxenvy(SEXP valmatSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type valmat(valmatSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get_maxenvy(valmat, n));
    return rcpp_result_gen;
END_RCPP
}
// get_avgval
arma::mat get_avgval(arma::mat valmat, int n);
RcppExport SEXP _FAIG_get_avgval(SEXP valmatSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type valmat(valmatSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get_avgval(valmat, n));
    return rcpp_result_gen;
END_RCPP
}
// get_fnV
double get_fnV(arma::mat valmat, int n, arma::mat avgval);
RcppExport SEXP _FAIG_get_fnV(SEXP valmatSEXP, SEXP nSEXP, SEXP avgvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type valmat(valmatSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type avgval(avgvalSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fnV(valmat, n, avgval));
    return rcpp_result_gen;
END_RCPP
}
// get_util
double get_util(arma::mat valmat);
RcppExport SEXP _FAIG_get_util(SEXP valmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type valmat(valmatSEXP);
    rcpp_result_gen = Rcpp::wrap(get_util(valmat));
    return rcpp_result_gen;
END_RCPP
}
// testfunc
int testfunc(int oldperson, int addperson, int n_persons);
RcppExport SEXP _FAIG_testfunc(SEXP oldpersonSEXP, SEXP addpersonSEXP, SEXP n_personsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type oldperson(oldpersonSEXP);
    Rcpp::traits::input_parameter< int >::type addperson(addpersonSEXP);
    Rcpp::traits::input_parameter< int >::type n_persons(n_personsSEXP);
    rcpp_result_gen = Rcpp::wrap(testfunc(oldperson, addperson, n_persons));
    return rcpp_result_gen;
END_RCPP
}
// localtrades_envy
List localtrades_envy(arma::mat vals, arma::ivec alloc, int maxiter, double eps);
RcppExport SEXP _FAIG_localtrades_envy(SEXP valsSEXP, SEXP allocSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type alloc(allocSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(localtrades_envy(vals, alloc, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// localtrades_social
List localtrades_social(arma::mat vals, arma::ivec alloc, int maxiter, double eps);
RcppExport SEXP _FAIG_localtrades_social(SEXP valsSEXP, SEXP allocSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type alloc(allocSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(localtrades_social(vals, alloc, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// localtrades_utility
List localtrades_utility(arma::mat vals, arma::ivec alloc, int maxiter, double eps);
RcppExport SEXP _FAIG_localtrades_utility(SEXP valsSEXP, SEXP allocSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type alloc(allocSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(localtrades_utility(vals, alloc, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// mincov
List mincov(arma::mat vals, arma::ivec alloc, arma::mat beta, int maxiter, double eps);
RcppExport SEXP _FAIG_mincov(SEXP valsSEXP, SEXP allocSEXP, SEXP betaSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type alloc(allocSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(mincov(vals, alloc, beta, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// mincovtarget
List mincovtarget(arma::mat vals, arma::ivec alloc, arma::mat beta, arma::vec target, int maxiter, double eps);
RcppExport SEXP _FAIG_mincovtarget(SEXP valsSEXP, SEXP allocSEXP, SEXP betaSEXP, SEXP targetSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type alloc(allocSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(mincovtarget(vals, alloc, beta, target, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// random_alloc
arma::ivec random_alloc(int n_items, int n_persons);
RcppExport SEXP _FAIG_random_alloc(SEXP n_itemsSEXP, SEXP n_personsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_items(n_itemsSEXP);
    Rcpp::traits::input_parameter< int >::type n_persons(n_personsSEXP);
    rcpp_result_gen = Rcpp::wrap(random_alloc(n_items, n_persons));
    return rcpp_result_gen;
END_RCPP
}
// randselect_envy
List randselect_envy(arma::mat vals, int maxiter, double eps);
RcppExport SEXP _FAIG_randselect_envy(SEXP valsSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(randselect_envy(vals, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// randselect_social
List randselect_social(arma::mat vals, int maxiter, double eps);
RcppExport SEXP _FAIG_randselect_social(SEXP valsSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(randselect_social(vals, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FAIG_get_valmat", (DL_FUNC) &_FAIG_get_valmat, 4},
    {"_FAIG_get_maxenvy", (DL_FUNC) &_FAIG_get_maxenvy, 2},
    {"_FAIG_get_avgval", (DL_FUNC) &_FAIG_get_avgval, 2},
    {"_FAIG_get_fnV", (DL_FUNC) &_FAIG_get_fnV, 3},
    {"_FAIG_get_util", (DL_FUNC) &_FAIG_get_util, 1},
    {"_FAIG_testfunc", (DL_FUNC) &_FAIG_testfunc, 3},
    {"_FAIG_localtrades_envy", (DL_FUNC) &_FAIG_localtrades_envy, 4},
    {"_FAIG_localtrades_social", (DL_FUNC) &_FAIG_localtrades_social, 4},
    {"_FAIG_localtrades_utility", (DL_FUNC) &_FAIG_localtrades_utility, 4},
    {"_FAIG_mincov", (DL_FUNC) &_FAIG_mincov, 5},
    {"_FAIG_mincovtarget", (DL_FUNC) &_FAIG_mincovtarget, 6},
    {"_FAIG_random_alloc", (DL_FUNC) &_FAIG_random_alloc, 2},
    {"_FAIG_randselect_envy", (DL_FUNC) &_FAIG_randselect_envy, 3},
    {"_FAIG_randselect_social", (DL_FUNC) &_FAIG_randselect_social, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_FAIG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
